name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**/*'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # build-and-push-docker:
  #   name: Build and Push Docker
  #   runs-on: ubuntu-latest
  #   services:
  #     registry:
  #       image: registry:2
  #       ports:
  #         - 5001:5000

  #   env:
  #     TEST_TAG: localhost:5001/actions/commit-info-extractor:latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 10

  #     - name: Configure Git Safe Directory
  #       run: git config --global --add safe.directory ${{ github.workspace }}

  #     - name: Setup Docker BuildX
  #       uses: docker/setup-buildx-action@v3
  #       with:
  #         install: true
  #         driver-opts: network=host

  #     - name: Build the Container
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ env.TEST_TAG }}

  #     - name: Run the Container
  #       env:
  #         INPUT_COMMIT_LIMIT: 10
  #         INPUT_EXTRACT_COMMAND: grep -oP \\bfix\\b
  #         INPUT_PRETTY: true
  #         INPUT_KEY_VARIABLE: extracted_info
  #       run: |
  #         docker run \
  #         --env INPUT_COMMIT_LIMIT="${{ env.INPUT_COMMIT_LIMIT }}" \
  #         --env INPUT_EXTRACT_COMMAND="${{ env.INPUT_EXTRACT_COMMAND }}" \
  #         --env INPUT_PRETTY="${{ env.INPUT_PRETTY }}" \
  #         --env INPUT_KEY_VARIABLE="${{ env.INPUT_KEY_VARIABLE }}" \
  #         --volume ${{ github.workspace }}:/usr/src \
  #         --rm ${{ env.TEST_TAG }}

  test-action:
    name: Test Extract Commit Action
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 10

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory ${{ github.workspace }}

      - name: Test Local Action (Basic)
        id: extract_commit
        uses: ./
        with:
          commit_limit: 10
          extract_command: grep -oP \\bfix\\b
          pretty: true
          key_variable: environment

      - name: Print Basic Output
        run: |
          echo "Extracted variable: ${{ steps.extract_commit.outputs.key_variable }} = ${{ steps.extract_commit.outputs.value_variable }}"

      - name: Test Local Action (With fail_on_empty)
        id: extract_commit_fail
        uses: ./
        continue-on-error: true
        with:
          commit_limit: 10
          extract_command: grep -oP \\bnonexistentword\\b
          pretty: true
          key_variable: environment
          fail_on_empty: true

      - name: Print Fail Test Output
        run: |
          echo "Fail test status: ${{ steps.extract_commit_fail.outcome }}"
          
      # 새롭게 추가된 output_format 기능 테스트
      - name: Test JSON Output Format
        id: json_format_test
        uses: ./
        with:
          commit_limit: 10
          extract_command: grep -oP \\bfix\\b
          pretty: true
          key_variable: json_result
          output_format: json

      - name: Print JSON Output
        run: |
          echo "JSON Output: ${{ steps.json_format_test.outputs.value_variable }}"
          echo "Type checking with jq:"
          echo '${{ steps.json_format_test.outputs.value_variable }}' | jq

      - name: Test CSV Output Format
        id: csv_format_test
        uses: ./
        with:
          commit_limit: 10
          extract_command: grep -oP \\bfix\\b
          pretty: true
          key_variable: csv_result
          output_format: csv

      - name: Print CSV Output
        run: |
          echo "CSV Output: ${{ steps.csv_format_test.outputs.value_variable }}"
          
      # 여러 결과를 처리하는 기능 테스트
      - name: Test Multiple Results
        id: multiple_results
        uses: ./
        with:
          commit_limit: 15
          extract_command: grep -oP '(?<=\s|^)[a-zA-Z]+(?=\s|$)' | head -n5
          pretty: true
          key_variable: multiple_words

      - name: Process Multiple Results
        run: |
          echo "Multiple results found: ${{ steps.multiple_results.outputs.value_variable }}"
          
          # Read results into array and process each one
          echo "Processing each result:"
          echo "${{ steps.multiple_results.outputs.value_variable }}" | while read -r word; do
            echo "  - Found word: $word"
          done
          
      # 복합 시나리오 테스트: 여러 결과 + JSON 포맷
      - name: Test Complex Scenario
        id: complex_test
        uses: ./
        with:
          commit_limit: 15
          extract_command: grep -oP '(?<=\s|^)[a-zA-Z]+(?=\s|$)' | head -n5
          pretty: true
          key_variable: complex_result
          output_format: json

      - name: Process Complex Scenario Results
        run: |
          echo "Complex scenario results (JSON array):"
          echo "${{ steps.complex_test.outputs.value_variable }}"
          
          # Parse JSON and extract each value
          echo "Parsing JSON array elements:"
          echo '${{ steps.complex_test.outputs.value_variable }}' | jq -c '.[]' | while read -r item; do
            echo "  - JSON item: $item"
          done