name: Example Workflow using Extract Commit Action

on:
  workflow_dispatch:
    inputs:
      run:
        description: 'workflow run'
        required: true
        default: 'true'
  workflow_run:
    workflows: ["Create release"]  # release.yml의 name과 일치해야 함
    types:
      - completed

permissions:
  contents: read

jobs:
  acton-module:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 10

      - name: Extract Commit Information (Basic)
        uses: somaz94/commit-info-extractor@v1
        id: extract_commit
        with:
          commit_limit: 10
          extract_command: "grep -oP '\\bfix\\b'" # Use regex for values
          pretty: true
          key_variable: 'CUSTOM_ENV' # Key

      - name: Print Output
        run: |
          echo "Extracted variable: ${{ steps.extract_commit.outputs.key_variable }} = ${{ steps.extract_commit.outputs.value_variable }}"

      - name: Extract Commit Information (With fail_on_empty)
        id: extract_commit_fail
        uses: somaz94/commit-info-extractor@v1
        continue-on-error: true
        with:
          commit_limit: 10
          extract_command: grep -oP \\bnonexistentword\\b
          pretty: true
          key_variable: environment
          fail_on_empty: true

      - name: Print Fail Test Output
        run: |
          echo "Fail test status: ${{ steps.extract_commit_fail.outcome }}"
      
      # 새롭게 추가된 output_format 기능 테스트
      - name: Test JSON Output Format
        id: json_format_test
        uses: somaz94/commit-info-extractor@v1
        with:
          commit_limit: 10
          extract_command: grep -oP \\bfix\\b
          pretty: true
          key_variable: json_result
          output_format: json

      - name: Print JSON Output
        run: |
          echo "JSON Output: ${{ steps.json_format_test.outputs.value_variable }}"
          echo "Type checking with jq:"
          echo '${{ steps.json_format_test.outputs.value_variable }}' | jq

      - name: Test CSV Output Format
        id: csv_format_test
        uses: somaz94/commit-info-extractor@v1
        with:
          commit_limit: 10
          extract_command: grep -oP \\bfix\\b
          pretty: true
          key_variable: csv_result
          output_format: csv

      - name: Print CSV Output
        run: |
          echo "CSV Output: ${{ steps.csv_format_test.outputs.value_variable }}"
          
      # 여러 결과를 처리하는 기능 테스트
      - name: Test Multiple Results
        id: multiple_results
        uses: somaz94/commit-info-extractor@v1
        with:
          commit_limit: 15
          extract_command: grep -oP '(?<=\s|^)[a-zA-Z]+(?=\s|$)' | head -n5
          pretty: true
          key_variable: multiple_words

      - name: Process Multiple Results
        run: |
          echo "Multiple results found: ${{ steps.multiple_results.outputs.value_variable }}"
          
          # Read results into array and process each one
          echo "Processing each result:"
          echo "${{ steps.multiple_results.outputs.value_variable }}" | while read -r word; do
            echo "  - Found word: $word"
          done
          
      # 복합 시나리오 테스트: 여러 결과 + JSON 포맷
      - name: Test Complex Scenario
        id: complex_test
        uses: somaz94/commit-info-extractor@v1
        with:
          commit_limit: 15
          extract_command: grep -oP '(?<=\s|^)[a-zA-Z]+(?=\s|$)' | head -n5
          pretty: true
          key_variable: complex_result
          output_format: json

      - name: Process Complex Scenario Results
        run: |
          echo "Complex scenario results (JSON array):"
          echo "${{ steps.complex_test.outputs.value_variable }}"
          
          # Parse JSON and extract each value
          echo "Parsing JSON array elements:"
          echo '${{ steps.complex_test.outputs.value_variable }}' | jq -c '.[]' | while read -r item; do
            echo "  - JSON item: $item"
          done
          
      # 실제 사용 사례 예시: Jira 티켓 식별 및 처리
      - name: Extract Jira Tickets
        id: jira_tickets
        uses: somaz94/commit-info-extractor@v1
        with:
          commit_limit: 20
          extract_command: grep -oP 'JIRA-\d+|[A-Z]+-\d+'
          pretty: true
          key_variable: TICKETS
          output_format: json
          
      - name: Process Jira Tickets
        run: |
          if [[ "${{ steps.jira_tickets.outputs.value_variable }}" != "[]" ]]; then
            echo "Found Jira tickets:"
            echo '${{ steps.jira_tickets.outputs.value_variable }}' | jq -c '.[]' | while read -r ticket; do
              # Remove quotes from the ticket string
              ticket=$(echo $ticket | sed 's/^"//;s/"$//')
              echo "  • Would update status for ticket: $ticket"
              # In a real workflow, you might call Jira API here
              # curl -u username:password -X POST "https://your-jira-instance/rest/api/2/issue/$ticket/transitions" -d '{"transition": {"id": "21"}}'
            done
          else
            echo "No Jira tickets found in commits"
          fi